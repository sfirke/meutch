"""Schema refactor: sync database with current models

Revision ID: a96202aa7e42
Revises: 00000000_initial
Create Date: 2025-06-18 21:54:16.292279

This migration synchronizes the database schema with the current model definitions:
- Creates new 'feedback' and 'messages' tables
- Adds 'created_at' column to User table
- Updates constraints, indexes, and nullable fields across multiple tables
- Replaces old 'message' table with new 'messages' table structure

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a96202aa7e42'
down_revision = '00000000_initial'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create new feedback table
    op.create_table('feedback',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('loan_request_id', sa.UUID(), nullable=False),
    sa.Column('reviewer_id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.String(length=10), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['loan_request_id'], ['loan_request.id'], ),
    sa.ForeignKeyConstraint(['reviewer_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    
    # Create new messages table
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sender_id', sa.UUID(), nullable=False),
    sa.Column('recipient_id', sa.UUID(), nullable=False),
    sa.Column('item_id', sa.UUID(), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('loan_request_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.ForeignKeyConstraint(['loan_request_id'], ['loan_request.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['messages.id'], ),
    sa.ForeignKeyConstraint(['recipient_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['sender_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Migrate data from old message table to new messages table if old table exists
    connection = op.get_bind()
    
    # Check if old message table exists
    inspector = sa.inspect(connection)
    tables = inspector.get_table_names()
    
    if 'message' in tables:
        # Get columns from old table to determine migration strategy
        old_columns = [col['name'] for col in inspector.get_columns('message')]
        
        if 'item_id' in old_columns:
            # Old table already has item_id, direct copy
            connection.execute(sa.text("""
                INSERT INTO messages (id, sender_id, recipient_id, item_id, body, timestamp, is_read, loan_request_id)
                SELECT id, sender_id, recipient_id, item_id, body, timestamp, is_read, loan_request_id
                FROM message
            """))
        else:
            # Old table doesn't have item_id, derive it from loan_request
            connection.execute(sa.text("""
                INSERT INTO messages (id, sender_id, recipient_id, item_id, body, timestamp, is_read, loan_request_id)
                SELECT 
                    m.id, 
                    m.sender_id, 
                    m.recipient_id, 
                    COALESCE(lr.item_id, '00000000-0000-0000-0000-000000000000'::uuid) as item_id,
                    m.body, 
                    m.timestamp, 
                    m.is_read, 
                    m.loan_request_id
                FROM message m
                LEFT JOIN loan_request lr ON lr.id = m.loan_request_id
            """))
        
        # Drop the old message table
        op.drop_table('message')
    
    # Update existing tables
    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.drop_constraint(batch_op.f('category_name_key'), type_='unique')
        batch_op.create_index(batch_op.f('ix_category_name'), ['name'], unique=True)
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('circle', schema=None) as batch_op:
        batch_op.add_column(sa.Column('visibility', sa.String(length=20), nullable=True))
        batch_op.alter_column('requires_approval',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.create_unique_constraint(None, ['id'])
        batch_op.create_unique_constraint(None, ['name'])

    with op.batch_alter_table('item', schema=None) as batch_op:
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('available',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('loan_request', schema=None) as batch_op:
        batch_op.alter_column('start_date',
               existing_type=sa.DATE(),
               nullable=False)
        batch_op.alter_column('end_date',
               existing_type=sa.DATE(),
               nullable=False)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.create_unique_constraint(None, ['id'])
        batch_op.drop_column('message')

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('tag_name_key'), type_='unique')
        batch_op.create_index(batch_op.f('ix_tag_name'), ['name'], unique=True)
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.create_unique_constraint(None, ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('created_at')

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_index(batch_op.f('ix_tag_name'))
        batch_op.create_unique_constraint(batch_op.f('tag_name_key'), ['name'])

    with op.batch_alter_table('loan_request', schema=None) as batch_op:
        batch_op.add_column(sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
        batch_op.alter_column('end_date',
               existing_type=sa.DATE(),
               nullable=True)
        batch_op.alter_column('start_date',
               existing_type=sa.DATE(),
               nullable=True)

    with op.batch_alter_table('item', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('available',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=False)

    with op.batch_alter_table('circle', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('requires_approval',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.drop_column('visibility')

    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_index(batch_op.f('ix_category_name'))
        batch_op.create_unique_constraint(batch_op.f('category_name_key'), ['name'])
        batch_op.alter_column('name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    op.create_table('message',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('recipient_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('loan_request_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['loan_request_id'], ['loan_request.id'], name=op.f('message_loan_request_id_fkey')),
    sa.ForeignKeyConstraint(['recipient_id'], ['user.id'], name=op.f('message_recipient_id_fkey')),
    sa.ForeignKeyConstraint(['sender_id'], ['user.id'], name=op.f('message_sender_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('message_pkey'))
    )
    
    # Migrate data back from messages to message table
    connection = op.get_bind()
    connection.execute(sa.text("""
        INSERT INTO message (id, sender_id, recipient_id, body, timestamp, is_read, loan_request_id)
        SELECT id, sender_id, recipient_id, body, timestamp, is_read, loan_request_id
        FROM messages
    """))
    
    op.drop_table('messages')
    op.drop_table('feedback')
    # ### end Alembic commands ###
